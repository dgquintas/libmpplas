import platform, time, sys, os, shutil

#############################################################
#                    SUPPORT FUNCTIONS                      #
#############################################################
def getNativelySupportedArchs():
  natArchs = ['generic']
  x86ArchMachines = ['i386', 'i486', 'i586', 'i686']
  currentPlatformMachine = platform.machine()

  
  if currentPlatformMachine in x86ArchMachines:
    natArchs.append('x86')
    if currentPlatformMachine == 'x86_64':
      natArchs.append('x86_64')
  elif currentPlatformMachine == 'ppc':
    natArchs.append('ppc')

  return tuple(natArchs)




Import('env')

env.Append( CPPPATH=['#/src/sources/nucleo'] )

files = Split("""
    CRT.cpp
    Factor.cpp
    Funciones.cpp
    GCD.cpp
    Hash.cpp
    LCM.cpp
    mp.cpp
    Perfil.cpp
    Potencia.cpp
    Primos.cpp
    Random.cpp
    R.cpp
    RedModular.cpp
    Semillero.cpp
    SimbolosLegendre.cpp
    Trascendentes.cpp
    utils.cpp
    Z.cpp
    Z_n.cpp
    """)

env.Append(CCFLAGS = ' -O' + env['optLevel'])

if env['enableProf']:
  env['arch'] += 'Prof'

env.Append(CPPDEFINES = {'ARCH': env['arch']})
if env['arch'] not in getNativelySupportedArchs():
  print "\nWARNING: the selected architecture (" + env['arch'] + ") is not natively supported by this system"
  for i in xrange(3):
    time.sleep(1)
    print '.',
    sys.stdout.flush()
  else:
    print ''
  

if env['enableExtraOpt']:
  env.Append(CCFLAGS = ' -ffast-math')

if env['enableDebug']:
  env.Append(CCFLAGS = ' -g')

if env['enableWarnings']:
  env.Append(CCFLAGS = ' -Wall -W -Werror')
#options processing ends

# configuring starts (only if we are not cleaning)
if env.GetOption('clean'):
  if os.path.exists(File(env['CONFIG_LOG']).abspath):
    os.remove(File(env['CONFIG_LOG']).abspath)
else:
  conf = Configure(env,log_file=env['CONFIG_LOG'])
  if not conf.CheckType('uint32_t', '#include <stdint.h>\n', 'C++'):
    print 'Could not find C99 type "uint32_t". Exiting...'
    Exit(1)
  if not conf.CheckType('int32_t', '#include <stdint.h>\n', 'C++'):
    print 'Could not find C99 type "int32_t". Exiting...'
    Exit(1)
  env = conf.Finish()
  # configuring ends


lib = env.SharedLibrary('numth', files)
env.Default(lib)
Alias('lib', lib)
Alias('all', lib)
env.Install(env['INSTALL_DIR_LIB'], lib)
Alias('install',env['INSTALL_DIR_LIB'])
Alias('all', 'install')

env.Append(LIBPATH = [Dir(env['INSTALL_DIR_LIB'])])
Export('env')

if 'tests' in map(str, BUILD_TARGETS):
  SConscript(dirs='tests')

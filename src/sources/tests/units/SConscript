import os.path

#env = Environment(CPPPATH=[libnumth_path, '/usr/include/qt3'],
#                  CCFLAGS=['-g'],
#                  LIBS=['numth','qt-mt', 'pthread', 'm', 'X11', 'Xext','qttestrunner' ],
#                  LIBPATH=[libnumth_path])
#
Import('myenv')

def CheckQt(context):
    context.Message( "Checking for QT..." )
    lastLIBS = context.env.get('LIBS',"")
    lastLIBPATH = context.env.get('LIBPATH', "")
    lastCPPPATH= context.env.get('CPPPATH', "")
    if not myenv['ENV'].has_key('QTDIR'):
      qtdir = "/usr/share/qt3/"
      print " WARNING: $QTDIR not set. Trying", qtdir ,"... ",
    else:
      qtdir = myenv['ENV']['QTDIR']

    context.env.Replace(LIBS = "qt-mt", LIBPATH = qtdir + "/lib", CPPPATH = qtdir + "/include" )
    ret = context.TryLink("""
#include <qapp.h>
int main(int argc, char **argv) {
  QApplication qapp(argc, argv);
  return 0;
}
""", ".cpp")
    if ret:
        context.env.Replace(LIBS = lastLIBS, LIBPATH=lastLIBPATH, CPPPATH=lastCPPPATH)
        context.env.Append(LIBS = "qt-mt", LIBPATH = qtdir + "/lib", CPPPATH = qtdir + "/include" )
    context.Result( ret )
    return ret

# configuring starts (only if we are not cleaning)
if not myenv.GetOption('clean'):
  conf = Configure( myenv, custom_tests = { "CheckQt" : CheckQt } )

  if not conf.CheckQt():
      print "We really need QT!"
      Exit(1)
  myenv = conf.Finish()

  myenv.Append(CPPPATH = '#/extra/include')
  myenv.Append(CPPPATH = ('#/extra/include' + myenv['ARCHBITS']))
  myenv.Append(LIBPATH= ('#/extra/lib' + myenv['ARCHBITS']))

  myenv.Append(LIBS = [ 'pthread', 'm', 'pari', 'qtunit'])

#myenv.Replace(CCFLAGS = '-O0 -ggdb3') #FIXME

moduleFiles = Split("""
    KernelTest.cpp
    ZTest.cpp
    Z_nTest.cpp
    ZM_nTest.cpp
    RSATest.cpp
    RandomTest.cpp
    PrimesTest.cpp
    MatrixZTest.cpp
    VectorZTest.cpp
    VectorRTest.cpp
    MethodsFactoryTest.cpp
    OpenMPTest.cpp
    ReductionTest.cpp
    ExponentiationTest.cpp
    SystemInfoTest.cpp
    GCDTest.cpp
    MPPLASTestSuite.cpp
    TestModule.cpp
    TextRunner.cpp
    """)

textRunner = myenv.Program('textRunner', moduleFiles)
module = myenv.SharedLibrary('testsmodule', moduleFiles)

myenv.Install(myenv['INSTALL_DIR_TESTS'], textRunner)
myenv.Install(myenv['INSTALL_DIR_TESTS'], module)
Alias('tests', textRunner)
Alias('tests', module)
#Alias('tests', myenv['INSTALL_DIR_TESTS'])
Alias('all', 'tests')
Alias('install', myenv['INSTALL_DIR_TESTS'])

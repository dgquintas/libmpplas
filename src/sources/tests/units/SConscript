import os.path

#env = Environment(CPPPATH=[libnumth_path, '/usr/include/qt3'],
#                  CCFLAGS=['-g'],
#                  LIBS=['numth','qt-mt', 'pthread', 'm', 'X11', 'Xext','qttestrunner' ],
#                  LIBPATH=[libnumth_path])
#
Import('myenv')

def CheckQt(context, qtdir):
    context.Message( "Checking for QT..." )
    lastLIBS = context.env.get('LIBS',"")
    lastLIBPATH = context.env.get('LIBPATH', "")
    lastCPPPATH= context.env.get('CPPPATH', "")
    context.env.Append(LIBS = "qt-mt", LIBPATH = qtdir + "/lib", CPPPATH = qtdir + "/include" )
    ret = context.TryLink("""
#include <qapp.h>
int main(int argc, char **argv) {
  QApplication qapp(argc, argv);
  return 0;
}
""", ".cpp")
    if not ret:
        context.env.Replace(LIBS = lastLIBS, LIBPATH=lastLIBPATH, CPPPATH=lastCPPPATH)
    context.Result( ret )
    return ret

env = Environment()
conf = Configure( env, custom_tests = { "CheckQt" : CheckQt } )

if not myenv['ENV'].has_key('QTDIR'):
  myenv['ENV']['QTDIR'] = "/usr/share/qt3/"
  print "WARNING: $QTDIR not set. Trying", myenv['ENV']['QTDIR']
if not conf.CheckQt(myenv['ENV']['QTDIR']):
    print "We really need QT!"
    Exit(1)
env = conf.Finish()


myenv.Append(CPPPATH = myenv['ENV']['QTDIR']+'/include')
myenv.Append(LIBPATH = myenv['ENV']['QTDIR']+'/lib')
myenv.Append(CPPPATH = '#/extra/include')
myenv.Append(CPPPATH = ('#/extra/include' + myenv['ARCHBITS']))
myenv.Append(LIBPATH= ('#/extra/lib' + myenv['ARCHBITS']))

myenv.Append(LIBS = [ 'pthread', 'm', 'pari', 'qtunit'])

#myenv.Replace(CCFLAGS = '-O0 -ggdb3') #FIXME

moduleFiles = Split("""
    KernelTest.cpp
    ZTest.cpp
    Z_nTest.cpp
    ZM_nTest.cpp
    RSATest.cpp
    RandomTest.cpp
    PrimesTest.cpp
    MatrixZTest.cpp
    VectorZTest.cpp
    VectorRTest.cpp
    MethodsFactoryTest.cpp
    OpenMPTest.cpp
    ReductionTest.cpp
    ExponentiationTest.cpp
    SystemInfoTest.cpp
    MPPLASTestSuite.cpp
    TestModule.cpp
    TextRunner.cpp
    """)

textRunner = myenv.Program('textRunner', moduleFiles)
module = myenv.SharedLibrary('testsmodule', moduleFiles)

myenv.Install(myenv['INSTALL_DIR_TESTS'], textRunner)
myenv.Install(myenv['INSTALL_DIR_TESTS'], module)
Alias('tests', textRunner)
Alias('tests', module)
#Alias('tests', myenv['INSTALL_DIR_TESTS'])
Alias('all', 'tests')
Alias('install', myenv['INSTALL_DIR_TESTS'])
